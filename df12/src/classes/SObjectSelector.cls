/**
 * Copyright (c) 2012, FinancialForce.com, inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, 
 *   are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, 
 *      this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice, 
 *      this list of conditions and the following disclaimer in the documentation 
 *      and/or other materials provided with the distribution.
 * - Neither the name of the FinancialForce.com, inc nor the names of its contributors 
 *      may be used to endorse or promote products derived from this software without 
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL 
 *  THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 *  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/

public abstract with sharing class SObjectSelector
{
	StringBuilder.FieldListBuilder m_fieldListBuilder;
	
	public SObjectSelector()
	{
		setFieldListBuilder ( new StringBuilder.MultiCurrencyFieldListBuilder( getSObjectFieldList() ) );
	}
	
	abstract List<Schema.SObjectField> getSObjectFieldList();
	
	abstract Schema.SObjectType getSObjectType();

	public StringBuilder.FieldListBuilder getFieldListBuilder()
	{
		return m_fieldListBuilder;
	}
	
	public void setFieldListBuilder(StringBuilder.FieldListBuilder fieldListBuilder)
	{
		m_fieldListBuilder = fieldListBuilder;
	}
	
	public String getFieldListString()
	{
		return getFieldListBuilder().getStringValue();
	}
	
	public String getRelatedFieldListString(String relation)
	{
		return getFieldListBuilder().getStringValue(relation + '.');
	}
	
	public String getSObjectName()
	{
		return getSObjectType().getDescribe().getName();
	}
	
	public virtual String getOrderBy()
	{
		return 'Name';
	}
		
	public List<SObject> selectSObjectsById(Set<Id> idSet)
	{
		assertIsAccessible();
		return QueryMemoizer.getQueryResult(String.format('SELECT {0} FROM {1} WHERE id in :idSet ORDER BY {2}', new List<String>{getFieldListString(),getSObjectName(),getOrderBy()}));
	}

	public void assertIsAccessible()
	{
    	if(!getSObjectType().getDescribe().isAccessible())
    	   throw new SObjectDomain.DomainException('Permission to access an ' + getSObjectType().getDescribe().getName() + ' dennied.');		
	}
	
	static testMethod void testGetFieldListString()
	{
		TestSObjectSelector selector = new TestSObjectSelector();
		if(UserInfo.isMultiCurrencyOrganization())
			system.assertEquals('Name,Id,AccountNumber,AnnualRevenue,CurrencyIsoCode',selector.getFieldListString());
		else
			system.assertEquals('Name,Id,AccountNumber,AnnualRevenue',selector.getFieldListString());
	}
	
	static testMethod void testGetSObjectName()
	{
		TestSObjectSelector selector = new TestSObjectSelector();
		system.assertEquals('Account',selector.getSObjectName());
	}
	
	static testMethod void testSelectSObjectsById()
	{
		// Inserting in reverse order so that we can test the order by of select 
		List<Account> accountList = new List<Account> {
			new Account(Name='TestAccount2',AccountNumber='A2',AnnualRevenue=12345.67),
			new Account(Name='TestAccount1',AccountNumber='A1',AnnualRevenue=76543.21) };		
		insert accountList;		
		Set<Id> idSet = new Set<Id>();
		for(Account item : accountList)
			idSet.add(item.Id);
			
		Test.startTest();		
		TestSObjectSelector selector = new TestSObjectSelector();
		List<Account> result = (List<Account>) selector.selectSObjectsById(idSet);		
		Test.stopTest();
		
		system.assertEquals(2,result.size());
		system.assertEquals('TestAccount1',result[0].Name);
		system.assertEquals('A1',result[0].AccountNumber);
		system.assertEquals(76543.21,result[0].AnnualRevenue);
		system.assertEquals('TestAccount2',result[1].Name);
		system.assertEquals('A2',result[1].AccountNumber);
		system.assertEquals(12345.67,result[1].AnnualRevenue);
	}
	
	static testMethod void testAssertIsAccessible()
	{
		List<Account> accountList = new List<Account> {
			new Account(Name='TestAccount2',AccountNumber='A2',AnnualRevenue=12345.67),
			new Account(Name='TestAccount1',AccountNumber='A1',AnnualRevenue=76543.21) };		
		insert accountList;		
		Set<Id> idSet = new Set<Id>();
		for(Account item : accountList)
			idSet.add(item.Id);
		
		// Create a user which will not have access to the test object type
		User testUser = SObjectDomain.createChatterExternalUser();
		if(testUser==null)
			return; // Abort the test if unable to create a user with low enough acess
		System.runAs(testUser)
		{					
			TestSObjectSelector selector = new TestSObjectSelector();
			try
			{
				List<Account> result = (List<Account>) selector.selectSObjectsById(idSet);
				System.assert(false,'Expected exception was not thrown');
			}
			catch(SObjectDomain.DomainException e)
			{
				System.assertEquals('Permission to access an Account dennied.',e.getMessage());
			}
		}
	}
	
	class TestSObjectSelector extends SObjectSelector
	{
		override List<Schema.SObjectField> getSObjectFieldList()
		{
			return new List<Schema.SObjectField> {
				Account.Name,
				Account.Id,
				Account.AccountNumber,
				Account.AnnualRevenue
			};
		}
		
		override Schema.SObjectType getSObjectType()
		{
			return Account.sObjectType;
		}
	}	
}